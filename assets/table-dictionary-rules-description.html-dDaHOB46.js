import{_ as a,c as i,a as t,o as n}from"./app-CJlkTddN.js";const s={};function l(r,e){return n(),i("div",null,e[0]||(e[0]=[t(`<h1 id="table-dictionary-rules-description" tabindex="-1"><a class="header-anchor" href="#table-dictionary-rules-description"><span>Table dictionary rules description</span></a></h1><p>JDictSelectTag, JSearchSelect and JTreeSelect support configuring table dictionaries and getting data directly from the table.</p><h2 id="table-dictionary-example" tabindex="-1"><a class="header-anchor" href="#table-dictionary-example"><span>Table dictionary example</span></a></h2><h3 id="jdictselecttag-dictionary-example" tabindex="-1"><a class="header-anchor" href="#jdictselecttag-dictionary-example"><span>JDictSelectTag Dictionary Example</span></a></h3><blockquote><p>Get dictionary data from the database table. dictCode format description: table name, text field, value field</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&lt;JDictSelectTag v-model=&quot;username&quot; placeholder=&quot;请选择用户&quot; dictCode=&quot;sys_user,realname,id&quot;/&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><h3 id="jsearchselect-dictionary-example" tabindex="-1"><a class="header-anchor" href="#jsearchselect-dictionary-example"><span>JSearchSelect Dictionary Example</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">  {</span>
<span class="line">    field: &#39;code&#39;,</span>
<span class="line">    label: &#39;用户名&#39;,</span>
<span class="line">    component: &#39;JSearchSelect&#39;,</span>
<span class="line">    colProps: { span: 6 },</span>
<span class="line">    componentProps: {</span>
<span class="line">      dict: &#39;demo where parent_id is null,name,code&#39;,</span>
<span class="line">    },</span>
<span class="line">  },</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h3 id="jtreeselect-dictionary-example" tabindex="-1"><a class="header-anchor" href="#jtreeselect-dictionary-example"><span>JTreeSelect Dictionary Example</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&lt;JTreeSelect placeholder=&quot;请选择分类&quot; v-model:value=&quot;formState.zdys&quot;</span>
<span class="line">  dict=&quot;sys_category,name,id&quot; pidValue=&quot;0&quot;/&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h2 id="table-dictionary-configuration-rules" tabindex="-1"><a class="header-anchor" href="#table-dictionary-configuration-rules"><span>Table dictionary configuration rules</span></a></h2><blockquote><p>Because the table dictionary is too flexible and there is a risk of being attacked, <code>v_3.5.4</code>complex SQL is not supported from version 1.</p></blockquote><h3 id="_1-query-field-requirements" tabindex="-1"><a class="header-anchor" href="#_1-query-field-requirements"><span>1. Query field requirements</span></a></h3><p>The query field can only be written with the field name corresponding to the database. Functions are not allowed to be used, such as concat, DATE_FORMAT, etc.<br> Aliases are not allowed to be used in the query field, such as: a.name, b.age</p><h3 id="_2-query-table-name-requirements" tabindex="-1"><a class="header-anchor" href="#_2-query-table-name-requirements"><span>2. Query table name requirements</span></a></h3><p>Aliases are not allowed for table names, such as: sys_user a</p><h3 id="_3-requirements" tabindex="-1"><a class="header-anchor" href="#_3-requirements"><span>3. Requirements</span></a></h3><p>1. The fields in the query conditions must be consistent with the query field requirements.<br> 2. In the conditional SQL, only the following matching rule symbols are allowed:</p><blockquote><p>The following are not supported, such as BETWEEN, EXISTS, NOT EXISTS, etc.</p></blockquote><ol><li>Equal to: =</li><li>Not equal to: != or &lt;&gt;</li><li>Greater than: &gt;</li><li>Less than: &lt;</li><li>Greater than or equal to: &gt;=</li><li>Less than or equal to: &lt;=</li><li>Fuzzy matching: LIKE</li><li>IN: Match multiple values</li><li>NOT IN: does not match multiple values</li><li>IS NULL: empty</li><li>IS NOT NULL: Not empty</li></ol>`,23)]))}const c=a(s,[["render",l]]),d=JSON.parse('{"path":"/syncadmin/ui-component-library/table-dictionary-rules-description.html","title":"Table dictionary rules description","lang":"ko-KR","frontmatter":{"order":16},"git":{"updatedTime":1749179241000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"a96cbbf1f6c96d0e9d6bafa4174131f10429b849","time":1749179241000,"email":"poh@empasy.com","author":"poh","message":"sync 제품군 추가"}]},"filePathRelative":"syncadmin/ui-component-library/table-dictionary-rules-description.md"}');export{c as comp,d as data};
