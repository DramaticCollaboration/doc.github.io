import{_ as e,c as r,a,o as s}from"./app-CJlkTddN.js";const n={};function o(d,t){return s(),r("div",null,t[0]||(t[0]=[a('<h1 id="stress-test-비교" tabindex="-1"><a class="header-anchor" href="#stress-test-비교"><span>stress test 비교</span></a></h1><p>Comparison results of tomcat vs undertow stress test</p><h3 id="database-query-stress-testing" tabindex="-1"><a class="header-anchor" href="#database-query-stress-testing"><span>Database query stress testing</span></a></h3><blockquote><p>MySQL connection pool, initial 300, idle 300, maximum activated 2000</p></blockquote><h4 id="_1k-concurrent-requests-10w-total-requests" tabindex="-1"><a class="header-anchor" href="#_1k-concurrent-requests-10w-total-requests"><span>1K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>57s</td><td>1743</td></tr><tr><td>Undertow</td><td>55s</td><td>1787</td></tr></tbody></table><h4 id="_2k-concurrent-requests-10w-total-requests" tabindex="-1"><a class="header-anchor" href="#_2k-concurrent-requests-10w-total-requests"><span>2K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>40s</td><td>2493</td></tr><tr><td>Undertow</td><td>36s</td><td>2765</td></tr></tbody></table><h4 id="_3k-concurrent-requests-10w-total-requests" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-10w-total-requests"><span>3K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>39s</td><td>2506</td></tr><tr><td>Undertow</td><td>36s</td><td>2771</td></tr></tbody></table><blockquote><p>MySQL connection pool, initial 300, idle 300, maximum activated 10000</p></blockquote><h4 id="_3k-concurrent-requests-10w-total-requests-1" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-10w-total-requests-1"><span>3K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>39s</td><td>2531</td></tr><tr><td>Undertow</td><td>35s</td><td>2805</td></tr></tbody></table><h3 id="summary-of-the-period" tabindex="-1"><a class="header-anchor" href="#summary-of-the-period"><span>Summary of the period</span></a></h3><p>As of the current test results, it can be seen that the database query stress test has reached a bottleneck. The database query does not go through redis, but directly goes to mysql. From the above data, undertow is relatively excellent compared to tomcat.</p><h3 id="web-query-test" tabindex="-1"><a class="header-anchor" href="#web-query-test"><span>Web query test</span></a></h3><h4 id="_3k-concurrent-requests-100-000-total-requests-instantaneous-high-traffic" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-100-000-total-requests-instantaneous-high-traffic"><span>3K concurrent requests, 100,000 total requests (instantaneous high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>7s</td><td>13129</td></tr><tr><td>Undertow</td><td>6s</td><td>14673</td></tr></tbody></table><h4 id="_8k-concurrent-requests-100-000-total-requests-instantaneous-huge-traffic" tabindex="-1"><a class="header-anchor" href="#_8k-concurrent-requests-100-000-total-requests-instantaneous-huge-traffic"><span>8K concurrent requests, 100,000 total requests (instantaneous huge traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>6s</td><td>15882</td></tr><tr><td>Undertow</td><td>5s</td><td>17530</td></tr></tbody></table><h4 id="_2k-concurrent-requests-1-million-total-requests-long-term-high-traffic" tabindex="-1"><a class="header-anchor" href="#_2k-concurrent-requests-1-million-total-requests-long-term-high-traffic"><span>2K concurrent requests, 1 million total requests (long-term high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>59s</td><td>16864</td></tr><tr><td>Undertow</td><td>51s</td><td>19347</td></tr></tbody></table><h4 id="_2w-concurrent-requests-1-million-total-requests-long-term-high-traffic" tabindex="-1"><a class="header-anchor" href="#_2w-concurrent-requests-1-million-total-requests-long-term-high-traffic"><span>2W concurrent requests, 1 million total requests (long-term high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th><th>Completion</th></tr></thead><tbody><tr><td>Tomcat</td><td>More than 2 minutes</td><td>Up to 14000</td><td>Completed 96W requests, unable to complete 100W</td></tr><tr><td>Undertow</td><td>51s</td><td>19240</td><td>Done successfully</td></tr></tbody></table><h3 id="summary-of-the-period-1" tabindex="-1"><a class="header-anchor" href="#summary-of-the-period-1"><span>Summary of the period</span></a></h3><p>Compared with no database involvement, the request is completed much faster. Two valid data can be obtained.</p><ul><li>The first data is that undertow has higher availability than tomcat in scenarios with long-term high traffic, and can maintain higher concurrent responses, while tomcat cannot maintain</li><li>The second data is in the case of 4 cores and 8G, undertow can maintain a maximum concurrency of about 19,000, and tomcat can maintain about 16,000</li></ul><hr><hr><hr><p>=================================================</p><h2 id="stress-test-results" tabindex="-1"><a class="header-anchor" href="#stress-test-results"><span>Stress test results</span></a></h2><h3 id="database-query-stress-testing-1" tabindex="-1"><a class="header-anchor" href="#database-query-stress-testing-1"><span>Database query stress testing</span></a></h3><blockquote><p>MySQL connection pool, initial 300, idle 300, maximum activated 2000</p></blockquote><h4 id="_1k-concurrent-requests-10w-total-requests-1" tabindex="-1"><a class="header-anchor" href="#_1k-concurrent-requests-10w-total-requests-1"><span>1K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>57s</td><td>1743</td></tr><tr><td>Undertow</td><td>55s</td><td>1787</td></tr></tbody></table><h4 id="_2k-concurrent-requests-10w-total-requests-1" tabindex="-1"><a class="header-anchor" href="#_2k-concurrent-requests-10w-total-requests-1"><span>2K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>40s</td><td>2493</td></tr><tr><td>Undertow</td><td>36s</td><td>2765</td></tr></tbody></table><h4 id="_3k-concurrent-requests-10w-total-requests-2" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-10w-total-requests-2"><span>3K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>39s</td><td>2506</td></tr><tr><td>Undertow</td><td>36s</td><td>2771</td></tr></tbody></table><blockquote><p>MySQL connection pool, initial 300, idle 300, maximum activated 10000</p></blockquote><h4 id="_3k-concurrent-requests-10w-total-requests-3" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-10w-total-requests-3"><span>3K concurrent requests, 10W total requests</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>39s</td><td>2531</td></tr><tr><td>Undertow</td><td>35s</td><td>2805</td></tr></tbody></table><h3 id="summary-of-the-period-2" tabindex="-1"><a class="header-anchor" href="#summary-of-the-period-2"><span>Summary of the period</span></a></h3><p>As of the current test results, it can be seen that the database query stress test has reached a bottleneck. The database query does not go through redis, but directly goes to mysql. From the above data, undertow is relatively excellent compared to tomcat.</p><h3 id="web-query-test-1" tabindex="-1"><a class="header-anchor" href="#web-query-test-1"><span>Web query test</span></a></h3><h4 id="_3k-concurrent-requests-100-000-total-requests-instantaneous-high-traffic-1" tabindex="-1"><a class="header-anchor" href="#_3k-concurrent-requests-100-000-total-requests-instantaneous-high-traffic-1"><span>3K concurrent requests, 100,000 total requests (instantaneous high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>7s</td><td>13129</td></tr><tr><td>Undertow</td><td>6s</td><td>14673</td></tr></tbody></table><h4 id="_8k-concurrent-requests-100-000-total-requests-instantaneous-huge-traffic-1" tabindex="-1"><a class="header-anchor" href="#_8k-concurrent-requests-100-000-total-requests-instantaneous-huge-traffic-1"><span>8K concurrent requests, 100,000 total requests (instantaneous huge traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>6s</td><td>15882</td></tr><tr><td>Undertow</td><td>5s</td><td>17530</td></tr></tbody></table><h4 id="_2k-concurrent-requests-1-million-total-requests-long-term-high-traffic-1" tabindex="-1"><a class="header-anchor" href="#_2k-concurrent-requests-1-million-total-requests-long-term-high-traffic-1"><span>2K concurrent requests, 1 million total requests (long-term high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>59s</td><td>16864</td></tr><tr><td>Undertow</td><td>51s</td><td>19347</td></tr></tbody></table><h4 id="_2w-concurrent-requests-1-million-total-requests-long-term-high-traffic-1" tabindex="-1"><a class="header-anchor" href="#_2w-concurrent-requests-1-million-total-requests-long-term-high-traffic-1"><span>2W concurrent requests, 1 million total requests (long-term high traffic)</span></a></h4><table><thead><tr><th>Servlet Container</th><th>Complete time</th><th>Average number of requests per second</th><th>Completion</th></tr></thead><tbody><tr><td>Tomcat</td><td>More than 2 minutes</td><td>Up to 14000</td><td>Completed 96W requests, unable to complete 100W</td></tr><tr><td>Undertow</td><td>51s</td><td>19240</td><td>Done successfully</td></tr></tbody></table><h3 id="summary-of-the-period-3" tabindex="-1"><a class="header-anchor" href="#summary-of-the-period-3"><span>Summary of the period</span></a></h3><p>Compared with no database involvement, the request is completed much faster. Two valid data can be obtained.</p><ul><li>The first data is that undertow has higher availability than tomcat in scenarios with long-term high traffic, and can maintain higher concurrent responses, while tomcat cannot maintain</li><li>The second data is in the case of 4 cores and 8G, undertow can maintain a maximum concurrency of about 19,000, and tomcat can maintain about 16,000</li></ul><h3 id="summarize" tabindex="-1"><a class="header-anchor" href="#summarize"><span>Summarize</span></a></h3><table><thead><tr><th>Servlet Container</th><th>Standard configuration</th><th>Maximum number of concurrent connections</th><th>Average number of responses per second</th></tr></thead><tbody><tr><td>Tomcat</td><td>4 cores 8G</td><td>4000</td><td>18300</td></tr><tr><td>Undertow</td><td>4 cores 8G</td><td>4000</td><td>21300</td></tr></tbody></table>',59)]))}const c=e(n,[["render",o]]),i=JSON.parse('{"path":"/syncboot/upgrade/upgrade-undertow-stress-test-comparison.html","title":"stress test 비교","lang":"ko-KR","frontmatter":{"order":5},"git":{"updatedTime":1749179241000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"a96cbbf1f6c96d0e9d6bafa4174131f10429b849","time":1749179241000,"email":"poh@empasy.com","author":"poh","message":"sync 제품군 추가"}]},"filePathRelative":"syncboot/upgrade/upgrade-undertow-stress-test-comparison.md"}');export{c as comp,i as data};
