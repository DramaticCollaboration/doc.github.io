import{_ as n,c as s,a,o as t}from"./app-CC5quYyA.js";const i={};function o(l,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="opening-up" tabindex="-1"><a class="header-anchor" href="#opening-up"><span>Opening up</span></a></h1><p><strong>Tip:</strong> Here we will explain some commonly used code snippets to help you get started quickly.</p><ul><li>There is a big difference between vue3 and vue2, and the design concepts are completely different. vue2 is based on template thinking, while vue3 focuses on JS (Reactivity API+TS).</li><li>For people who are familiar with HTML, Vue2 will be easy to use; but for Vue3, if you don’t have a certain foundation in ES6, it will be very difficult.</li></ul><h3 id="_1-execution-of-deconstructed-functions" tabindex="-1"><a class="header-anchor" href="#_1-execution-of-deconstructed-functions"><span>1. Execution of deconstructed functions</span></a></h3><p><img src="https://lfs.k.topthink.com/lfs/58fbd3c405356ce0b2dd4c29d9971c74475cb04a9cc4e475e65b014c5031dc09.dat" alt=""><br> Code interpretation:</p><blockquote><p>The meaning of this code is <code>goPage</code>a <code>useMessageHref</code>function defined in a function (that is, a function in a function).<br> The sub-function defined in a function is just a definition and will not run. If it runs, the sub-function needs to be called manually to execute.<br><img src="https://lfs.k.topthink.com/lfs/7113597c6e3fea69d97e84d7d73ac01815840cb0b91eda5a79d436220b00c2dc.dat" alt=""></p></blockquote><p>Note: This writing method is the basic usage in the vue3 project. It is very important to understand the usage principle of this function.</p><h3 id="_2-es6-deconstruction-principle-knowledge-points" tabindex="-1"><a class="header-anchor" href="#_2-es6-deconstruction-principle-knowledge-points"><span>2. ES6 deconstruction principle knowledge points</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">//数组解构（[]）</span>
<span class="line">const [registerModal, { openModal }] = useModal();</span>
<span class="line">//对象解构（{}）</span>
<span class="line">const { goPage, registerHistoryModal, registerTaskModal, registerDesignFormModal, isDesignFormComment  } = useMessageHref(emit, props);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p><img src="https://lfs.k.topthink.com/lfs/68ef64131542485eea8bc788d7f00d6233a795a3e04f21be0dd0d5a7f7a35ce9.dat" alt=""></p><h3 id="_3-usemodal-in-the-project-uses-array-deconstruction" tabindex="-1"><a class="header-anchor" href="#_3-usemodal-in-the-project-uses-array-deconstruction"><span>3. UseModal() in the project uses array deconstruction</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">//弹窗modal为什么采用数组解构呢？</span>
<span class="line"> const [registerModal, { openModal }] = useModal();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>Let&#39;s take a look at the definition of the useModal() function and find that the return value type is an array<br><img src="https://lfs.k.topthink.com/lfs/82aaf6e24cd6441136874ab9e82ec419c5d5b83e33fcb67a7ec208ee5b06173b.dat" alt=""></p><h3 id="_4-basicform-encapsulation-is-too-harsh" tabindex="-1"><a class="header-anchor" href="#_4-basicform-encapsulation-is-too-harsh"><span>4. BasicForm encapsulation is too harsh</span></a></h3><h5 id="solution-1-customize-non-existent-controls-through-slots" tabindex="-1"><a class="header-anchor" href="#solution-1-customize-non-existent-controls-through-slots"><span>Solution 1: Customize non-existent controls through slots</span></a></h5><p>Reference code: src/views/demo/form/index.vue<br> Reference route: <a href="http://localhost:3100/comp/form/basic" target="_blank" rel="noopener noreferrer">http://localhost:3100/comp/form/basic</a></p><p>Field customization</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">    {</span>
<span class="line">      field: &#39;selectA&#39;,</span>
<span class="line">      component: &#39;Select&#39;,</span>
<span class="line">      label: &#39;互斥SelectA&#39;,</span>
<span class="line">      slot: &#39;selectA&#39;,</span>
<span class="line">      defaultValue: [],</span>
<span class="line">      colProps: {</span>
<span class="line">        span: 8,</span>
<span class="line">      },</span>
<span class="line">    },</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>Slot Code</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&lt;template #selectA=&quot;{ model, field }&quot;&gt;</span>
<span class="line">  &lt;a-select :options=&quot;optionsA&quot; mode=&quot;multiple&quot; v-model:value=&quot;model[field]&quot; @change=&quot;valueSelectA = model[field]&quot; allowClear /&gt;</span>
<span class="line">&lt;/template&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h5 id="solution-2-use-native-writing-a-form" tabindex="-1"><a class="header-anchor" href="#solution-2-use-native-writing-a-form"><span>Solution 2: Use native writing a-form</span></a></h5><blockquote><p>The project supports BasicForm without encapsulation, and provides examples and corresponding code generation.</p></blockquote><p>Reference example: src/views/demo/jeecg/Native/one/components/OneNativeForm.vue<br> Reference route: <a href="http://localhost:3100/one/OneNativeList" target="_blank" rel="noopener noreferrer">http://localhost:3100/one/OneNativeList</a><br> Quick tip: Select when generating code<code>Vue3原生</code><br><img src="https://lfs.k.topthink.com/lfs/4fb32831825925b043b946a52d79ead300415a723bbdacd031afa4acf9f22b5b.dat" alt=""></p><h3 id="_5-how-to-customize-pop-up-windows" tabindex="-1"><a class="header-anchor" href="#_5-how-to-customize-pop-up-windows"><span>5. How to customize pop-up windows</span></a></h3><h3 id="_6-table-list-custom-rendering-slot" tabindex="-1"><a class="header-anchor" href="#_6-table-list-custom-rendering-slot"><span>6. Table list custom rendering slot</span></a></h3>`,29)]))}const r=n(i,[["render",o]]),d=JSON.parse('{"path":"/syncadmin/front-end-experience/opening-up.html","title":"Opening up","lang":"ko-KR","frontmatter":{"order":3},"git":{"updatedTime":1749510202000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"e8d2845a48d72a49b99a62ed0e9511823ff14831","time":1749510202000,"email":"poh@empasy.com","author":"poh","message":"로고 alt text 변경"}]},"filePathRelative":"syncadmin/front-end-experience/opening-up.md"}');export{r as comp,d as data};
