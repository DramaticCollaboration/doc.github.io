import{_ as s,c as a,a as n,o as t}from"./app-CU20V-HQ.js";const r={};function c(i,e){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="docker-starts-microservices-new" tabindex="-1"><a class="header-anchor" href="#docker-starts-microservices-new"><span>Docker starts microservices (new)</span></a></h1><p>The purpose of this article is to start the microservice project backend through docker</p><blockquote><p>Only compatible with <code>2024-06-30</code>code downloaded later</p></blockquote><h2 id="docker-starts-the-microservice-background" tabindex="-1"><a class="header-anchor" href="#docker-starts-the-microservice-background"><span>Docker starts the microservice background</span></a></h2><h3 id="_1-download-the-project" tabindex="-1"><a class="header-anchor" href="#_1-download-the-project"><span>1. Download the project</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone https://github.com/jeecgboot/SyncBoot.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><h3 id="_2-configure-host" tabindex="-1"><a class="header-anchor" href="#_2-configure-host"><span>2. Configure host</span></a></h3><blockquote><p>This step must be configured, otherwise nacos, database, etc. will not be able to connect.</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">127.0.0.1 jeecg-boot-mysql</span>
<span class="line">127.0.0.1 jeecg-boot-redis</span>
<span class="line">127.0.0.1 jeecg-boot-nacos</span>
<span class="line">127.0.0.1 jeecg-boot-system</span>
<span class="line">127.0.0.1 jeecg-boot-gateway</span>
<span class="line">127.0.0.1 jeecg-boot-sentinel</span>
<span class="line">127.0.0.1 jeecg-boot-xxljob</span>
<span class="line">127.0.0.1 jeecg-boot-rabbitmq</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>You can use the tool <a href="https://download.csdn.net/download/zhangdaiscott/88918530" target="_blank" rel="noopener noreferrer">SwitchHosts</a> to quickly configure the host.</p><h3 id="_3-compile-the-background-project" tabindex="-1"><a class="header-anchor" href="#_3-compile-the-background-project"><span>3. Compile the background project</span></a></h3><p>Enter the jeecg-boot root directory</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd SyncBoot/jeecg-boot</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><p>Execute the packaging command</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">mvn clean install -Pdev,SpringCloud</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><p>See the execution succeeded</p><h3 id="_5-create-a-microservice-container-group" tabindex="-1"><a class="header-anchor" href="#_5-create-a-microservice-container-group"><span>5. Create a microservice container group</span></a></h3><p>Enter the jeecg-server-cloud root directory</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd  jeecg-server-cloud</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><p>Excuting an order</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">docker-compose up -d</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><p>Container generation results:</p><h3 id="_6-access-the-gateway-address" tabindex="-1"><a class="header-anchor" href="#_6-access-the-gateway-address"><span>6. Access the gateway address</span></a></h3><p>Wait for 1 and a half minutes until all services are started and access the gateway address</p><p><a href="http://localhost:9999" target="_blank" rel="noopener noreferrer">http://localhost:9999</a></p><p>Seeing the swagger interface document indicates that the microservice has been successfully started</p>`,32)]))}const d=s(r,[["render",c]]),l=JSON.parse('{"path":"/syncboot/docker/docker-starts-microservices.html","title":"Docker starts microservices (new)","lang":"ko-KR","frontmatter":{"order":6},"git":{"updatedTime":1749507909000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"b750c3240053572cbcbb08ac1e9cd0bd9974af53","time":1749507909000,"email":"poh@empasy.com","author":"poh","message":"build to docs:build"}]},"filePathRelative":"syncboot/docker/docker-starts-microservices.md"}');export{d as comp,l as data};
