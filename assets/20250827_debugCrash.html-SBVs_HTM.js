import{_ as n,c as a,b as e,o as t}from"./app-zisiboR-.js";const i={};function l(o,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="linux에서-디버그중에-어플이-갑자기-죽는-enospc-system-limit-for-number-of-file-watchers-reached-오류" tabindex="-1"><a class="header-anchor" href="#linux에서-디버그중에-어플이-갑자기-죽는-enospc-system-limit-for-number-of-file-watchers-reached-오류"><span>Linux에서 디버그중에 어플이 갑자기 죽는 &quot;ENOSPC: System limit for number of file watchers reached&quot; 오류</span></a></h1><p>해결 1) Linux inotify watcher 한도 증가(권장)</p><ul><li>현재 값 확인:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Bash</span></span>
<span class="line">  <span class="token function">cat</span> /proc/sys/fs/inotify/max_user_watches</span>
<span class="line">  <span class="token function">cat</span> /proc/sys/fs/inotify/max_user_instances</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>일시 증가(즉시 적용):</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Bash (sudo 필요)</span></span>
<span class="line">  <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token assign-left variable">fs.inotify.max_user_watches</span><span class="token operator">=</span><span class="token number">524288</span></span>
<span class="line">  <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token assign-left variable">fs.inotify.max_user_instances</span><span class="token operator">=</span><span class="token number">1024</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>영구 설정(재부팅 후에도 유지):</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Bash (sudo 필요)</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&#39;fs.inotify.max_user_watches=524288&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/99-inotify.conf</span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&#39;fs.inotify.max_user_instances=1024&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/99-inotify.conf</span>
<span class="line">  <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span> /etc/sysctl.d/99-inotify.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>이후 다시: yarn dev:debug 실행</li></ul><p>해결 2) Watcher 대신 폴링 사용(대안/즉시 응급처치)</p><ul><li>한 번만 시험:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token assign-left variable">CHOKIDAR_USEPOLLING</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">CHOKIDAR_INTERVAL</span><span class="token operator">=</span><span class="token number">800</span> <span class="token function">yarn</span> dev:debug</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>자주 쓸 거면 Run/Debug 구성의 Environment variables에 CHOKIDAR_USEPOLLING=1, CHOKIDAR_INTERVAL=800 추가</li></ul>`,13)]))}const p=n(i,[["render",l]]),r=JSON.parse('{"path":"/logs/20250827_debugCrash.html","title":"리눅스 electron 디버깅 Crash","lang":"ko-KR","frontmatter":{"title":"리눅스 electron 디버깅 Crash","description":"기억은 금방 사라지지만, 로그는 영원하다! 🎯 우리 팀의 재미있고 자유로운 작업 기록 공간","head":[["meta",{"name":"keywords","content":"공부 한것들을 적어 보아요"}],["meta",{"property":"og:title","content":"작업 로그 놀이터 - 자유로운 작업 기록 공간 🎪"}],["meta",{"property":"og:description","content":"이 곳은 팀원들이 자유롭게 작업 로그를 기록하고 공유하는 공간입니다. 강제 없이 필요할 때 편하게 추가할 수 있는 재미있는 작업 로그 시스템을 소개합니다."}],["meta",{"property":"og:image","content":"https://doc.empasy.com/images/favicon.png"}],["meta",{"property":"og:url","content":"https://doc.empasy.com/study/"}]],"sort":400},"git":{"updatedTime":1756764210000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"9404de12e46f40ba57e5267d673af39db0c7179e","time":1756764210000,"email":"poh@empasy.com","author":"poh","message":"순서 변경, 오타 수정"}]},"filePathRelative":"logs/20250827_debugCrash.md"}');export{p as comp,r as data};
