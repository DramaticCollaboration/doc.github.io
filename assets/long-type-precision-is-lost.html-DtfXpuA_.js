import{_ as n,c as s,a,o as i}from"./app-CJlkTddN.js";const l={};function t(o,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="long-type-precision-is-lost" tabindex="-1"><a class="header-anchor" href="#long-type-precision-is-lost"><span>Long type precision is lost</span></a></h1><blockquote><p>When the field in the entity class is of <code>Long</code>type and the value exceeds <code>js</code>the length range displayed by the front end, an error will be displayed on the front end.</p></blockquote><h3 id="method-1-automatically-convert-long-to-string-when-using-jsonserialize-annotation" tabindex="-1"><a class="header-anchor" href="#method-1-automatically-convert-long-to-string-when-using-jsonserialize-annotation"><span>Method 1: Automatically convert Long to String when using @JsonSerialize annotation</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@JsonSerialize(using = ToStringSerializer.class)</span>
<span class="line">private Long id;</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h3 id="method-2-automatically-convert-long-to-string-when-using-jsonformat-annotation" tabindex="-1"><a class="header-anchor" href="#method-2-automatically-convert-long-to-string-when-using-jsonformat-annotation"><span>Method 2: Automatically convert Long to String when using @JsonFormat annotation</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@JsonFormat(shape = JsonFormat.Shape.STRING)</span>
<span class="line">private Long id;</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h3 id="method-3-add-the-following-code-to-the-global-configuration-org-jeecg-config-webmvcconfiguration" tabindex="-1"><a class="header-anchor" href="#method-3-add-the-following-code-to-the-global-configuration-org-jeecg-config-webmvcconfiguration"><span>Method 3 Add the following code to the global configuration org.jeecg.config.WebMvcConfiguration</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">   builder.serializerByType(Long.class, ToStringSerializer.instance);</span>
<span class="line">   builder.serializerByType(Long.TYPE, ToStringSerializer.instance);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>The specific configuration is as follows</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@Bean</span>
<span class="line">public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {</span>
<span class="line">    return builder -&gt; {</span>
<span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span>
<span class="line">        //返回时间数据序列化</span>
<span class="line">        builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(formatter));</span>
<span class="line">        //接收时间数据反序列化</span>
<span class="line">        builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(formatter));</span>
<span class="line">        //序列化Long</span>
<span class="line">        builder.serializerByType(Long.class, ToStringSerializer.instance);</span>
<span class="line">        builder.serializerByType(Long.TYPE, ToStringSerializer.instance);</span>
<span class="line">    };</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p>`,14)]))}const c=n(l,[["render",t]]),d=JSON.parse('{"path":"/syncboot/common-functions/long-type-precision-is-lost.html","title":"Long type precision is lost","lang":"ko-KR","frontmatter":{"order":7},"git":{"updatedTime":1749179241000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"a96cbbf1f6c96d0e9d6bafa4174131f10429b849","time":1749179241000,"email":"poh@empasy.com","author":"poh","message":"sync 제품군 추가"}]},"filePathRelative":"syncboot/common-functions/long-type-precision-is-lost.md"}');export{c as comp,d as data};
