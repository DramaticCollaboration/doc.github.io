import{_ as t,c as r,a as l,b as i,e as s,d as a,w as o,r as c,o as d}from"./app-CGhJnnYK.js";const m={};function p(u,e){const n=c("RouteLink");return d(),r("div",null,[e[6]||(e[6]=l(`<h1 id="practical-microservice-module-layering" tabindex="-1"><a class="header-anchor" href="#practical-microservice-module-layering"><span>Practical Microservice Module Layering</span></a></h1><h3 id="microservice-module-explanation" tabindex="-1"><a class="header-anchor" href="#microservice-module-explanation"><span>Microservice module explanation</span></a></h3><blockquote><p>If you do not consider the switching between monolithic and microservices and directly adopt microservice development, the following project structure is recommended<code>（JeecgBoot官方需兼容单体和微服务切换，所以默认不做拆分）</code></p></blockquote><p>jeecg-boot-module-cms directory structure description</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">├── jeecg-boot-module-cms           --CMS微服务模块</span>
<span class="line">    ├──jeecg-boot-module-cms-api     -- 实体、dto、vo、服务定义</span>
<span class="line">        ├──dto</span>
<span class="line">        ├──entity</span>
<span class="line">        ├──feign</span>
<span class="line">        ├──vo</span>
<span class="line">    ├──jeecg-boot-module-cms-biz      --业务实现（引用jeecg-boot-module-cms-api）</span>
<span class="line">        ├──controller</span>
<span class="line">        ├──mapper</span>
<span class="line">        ├──service</span>
<span class="line">    ├──jeecg-boot-module-cms-start      --启动项目</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p>`,6)),i("ul",null,[e[4]||(e[4]=i("li",null,"The advantage of this directory structure is that it splits entities and enables single-body and microservice shared entity definitions;",-1)),e[5]||(e[5]=i("li",null,"Other microservice modules need to call the microservice interface and directly introduce jeecg-boot-module-cms-api.",-1)),i("li",null,[e[1]||(e[1]=s("jeecg provides scaffolding to quickly generate this structural module. Refer to the document ")),a(n,{to:"/syncboot/microservice/archetype.html"},{default:o(()=>e[0]||(e[0]=[s("to use archetype to generate microservice modules")])),_:1})]),i("li",null,[e[3]||(e[3]=s("Microservice interface definition method, refer to the document ")),a(n,{to:"/syncboot/microservice/super/feign.html"},{default:o(()=>e[2]||(e[2]=[s("Microservice Feign interface call example")])),_:1})])])])}const b=t(m,[["render",p]]),g=JSON.parse('{"path":"/syncboot/microservice/practical-skills/practical-microservice-module-layering.html","title":"Practical Microservice Module Layering","lang":"ko-KR","frontmatter":{"order":7},"git":{"updatedTime":1749510018000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"b5c965c32dfeaa81de62133194782387bf36abfc","time":1749510018000,"email":"poh@empasy.com","author":"poh","message":"로고 표시 오류 수정"}]},"filePathRelative":"syncboot/microservice/practical-skills/practical-microservice-module-layering.md"}');export{b as comp,g as data};
