import{_ as a,c as t,a as s,o as i}from"./app-CJlkTddN.js";const n={};function l(o,e){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="unified-file-upload-rules" tabindex="-1"><a class="header-anchor" href="#unified-file-upload-rules"><span>Unified file upload rules</span></a></h1><p>jeecg-boot provides file and image upload functions. The first two files have introduced MinIO and OSS configuration. Now you can choose the upload method according to your needs.</p><h2 id="you-can-switch-the-image-file-storage-mode-in-the-yml-file" tabindex="-1"><a class="header-anchor" href="#you-can-switch-the-image-file-storage-mode-in-the-yml-file"><span>You can switch the image/file storage mode in the yml file</span></a></h2><p><img src="https://lfs.k.topthink.com/lfs/47fd75003c5332a332adc58d7ee1451481f4b66b921ee92ce06762639ced7c0a.dat" alt=""><br> local is local storage, and jeecg.path.upload also needs to be configured.<br> minio is to use MinIO online storage.<br> alioss is to use Alibaba Cloud online storage.</p><h2 id="access-path" tabindex="-1"><a class="header-anchor" href="#access-path"><span>Access path</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">http://127.0.0.1:8080/jeecg-boot/sys/common/upload</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@PostMapping(value = &quot;/upload&quot;)</span>
<span class="line">public Result&lt;?&gt; upload(HttpServletRequest request, HttpServletResponse response) {</span>
<span class="line">   Result&lt;?&gt; result = new Result&lt;&gt;();</span>
<span class="line">   String savePath = &quot;&quot;;</span>
<span class="line">   String bizPath = request.getParameter(&quot;biz&quot;);</span>
<span class="line">   MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span>
<span class="line">   MultipartFile file = multipartRequest.getFile(&quot;file&quot;);// 获取上传文件对象</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h2 id="send-parameter-description" tabindex="-1"><a class="header-anchor" href="#send-parameter-description"><span>Send parameter description</span></a></h2><table><thead><tr><th>name</th><th>type</th><th>illustrate</th></tr></thead><tbody><tr><td>we</td><td>String</td><td>Custom file storage path, alioss is required</td></tr></tbody></table>`,11)]))}const d=a(n,[["render",l]]),p=JSON.parse('{"path":"/syncboot/advanced-features/system-file-upload/unified-file-upload-rules.html","title":"Unified file upload rules","lang":"ko-KR","frontmatter":{"order":2},"git":{"updatedTime":1749179241000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"a96cbbf1f6c96d0e9d6bafa4174131f10429b849","time":1749179241000,"email":"poh@empasy.com","author":"poh","message":"sync 제품군 추가"}]},"filePathRelative":"syncboot/advanced-features/system-file-upload/unified-file-upload-rules.md"}');export{d as comp,p as data};
