import{_ as i,c as t,a,o as s}from"./app-CU20V-HQ.js";const n={};function l(o,e){return s(),t("div",null,e[0]||(e[0]=[a('<h1 id="table-creation-specifications" tabindex="-1"><a class="header-anchor" href="#table-creation-specifications"><span>Table creation specifications</span></a></h1><h2 id="table-design-specifications" tabindex="-1"><a class="header-anchor" href="#table-design-specifications"><span>Table design specifications</span></a></h2><ul><li>1. The primary key must be: ID, type [Long(19)] unique index, for historical reasons, use String(32) type temporarily</li><li>2. Foreign key field naming: {[related table name] without the business prefix} + &quot;_&quot; + {related field name}, for example: order_main_id</li><li>3. Distinguishing bit: iz_* [String(1)] 1 means yes, 0 means no. (Disabling is_ will cause problems with code generation entities)</li><li>4. Status bit: *_status [String(1-2)] The status field must be annotated to explain what each value represents</li><li>5. Field naming, multiple words are separated by underscores, for example: school_id</li><li>6. Index naming: The primary key index is named: pk_table name abbreviation_field name (the index must be unique in the entire database to be compatible with multiple databases); the<br> unique index is named: <code>uniq_表名缩写_字段名</code>or <code>uk_表名缩写_字段名</code>;<br> the common index command is: <code>idx_表名缩写_字段名</code>(table name abbreviation: underscores separate the first letters of the words)</li><li>7. For the fields of distinction, status, and type, try to use the String type to avoid some problems with numeric types; if performance is a concern, it is recommended to use the int type<br> (disable the tinyint type, which needs to be compatible with other databases);</li><li>8. Field default value (try not to set a default value for the field, use encoding to add the default value) <code>因为在转库的过程中，不同数据库会有丢失默认值的情况</code></li></ul><h2 id="table-business-prefix-and-table-creation-standard-fields" tabindex="-1"><a class="header-anchor" href="#table-business-prefix-and-table-creation-standard-fields"><span>Table business prefix and table creation standard fields</span></a></h2><ul><li>1. Table names must have a business prefix: for example, starting with sys_ (system table prefix)</li><li>2. All tables plus fields: department to which they belong, used for department data permissions</li><li>3. Add fields to all tables: creation time, creator, last updated time, updater</li><li>4. Logical deletion field, del_flag [int(1)], 1 means deletion, 0 means non-deletion, optional</li><li>5. Optimistic lock field, update_count[Integer], optional, for optimistic lock usage, <a href="https://www.baomidou.com/pages/0d93c0/#optimisticlockerinnerinterceptor" target="_blank" rel="noopener noreferrer">refer to the documentation</a></li><li>6. String type fields, varchar type length is not allowed to exceed 1000 (if it is too long, the type will change when transferring to the database)</li><li>7. Use large text as little as possible, use text and longtext as field types, and disable blob series types (must be confirmed)</li></ul><h2 id="helper-scripts" tabindex="-1"><a class="header-anchor" href="#helper-scripts"><span>Helper Scripts</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">ALTER TABLE `表名`</span>\n<span class="line">ADD COLUMN `create_by`  varchar(32) NULL COMMENT &#39;创建人&#39;,</span>\n<span class="line">ADD COLUMN `create_time`  datetime NULL COMMENT &#39;创建时间&#39; AFTER `create_by`,</span>\n<span class="line">ADD COLUMN `update_by`  varchar(32) NULL COMMENT &#39;修改人&#39; AFTER `create_time`,</span>\n<span class="line">ADD COLUMN `update_time`  datetime NULL COMMENT &#39;修改时间&#39; AFTER `update_by`,</span>\n<span class="line">ADD COLUMN `del_flag`  int(1) NULL COMMENT &#39;0表示未删除,1表示删除&#39; AFTER `update_time`;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>other instructions:</p><ul><li>Table field comments, each field must have a comment description;</li><li>Table field annotations, status type fields must specify the value rules (such as gender sex value rules),<br> such as: &#39;Gender 0 male, 1 female&#39;</li><li>Indexes: add indexes to fields with high query frequency (single field index, combined index, unique index);</li><li>For status and type fields, try to use string varchar type with a length of 1-2, and use int type less to avoid unnecessary problems.</li></ul><h2 id="encoding-sql-compliant" tabindex="-1"><a class="header-anchor" href="#encoding-sql-compliant"><span>Encoding SQL compliant</span></a></h2><blockquote><p>Database compatibility is an issue that platform-level products must adapt to. When writing SQL, you need to pay attention to the compatibility of different databases to ensure compatibility.</p></blockquote><p>Refer to internal documentation:<code>JEECG公司内部文档&gt;&gt;国产数据库适配&gt;&gt;编码SQL兼容注意规范</code></p>',13)]))}const d=i(n,[["render",l]]),c=JSON.parse('{"path":"/syncboot/coding-standards/table-ccreation-specifications.html","title":"Table creation specifications","lang":"ko-KR","frontmatter":{"order":2},"git":{"updatedTime":1749507909000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"b750c3240053572cbcbb08ac1e9cd0bd9974af53","time":1749507909000,"email":"poh@empasy.com","author":"poh","message":"build to docs:build"}]},"filePathRelative":"syncboot/coding-standards/table-ccreation-specifications.md"}');export{d as comp,c as data};
