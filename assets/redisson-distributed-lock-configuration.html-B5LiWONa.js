import{_ as n,c as s,a,o as i}from"./app-DGEuurYf.js";const l={};function t(o,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="redisson-distributed-lock-configuration" tabindex="-1"><a class="header-anchor" href="#redisson-distributed-lock-configuration"><span>Redisson distributed lock configuration</span></a></h1><blockquote><p>Redisson is used to implement distributed locks. Application scenarios: flash sales, group buying, train ticket purchases and other high-concurrency applications.</p></blockquote><h3 id="step-1-introduce-distributed-lock-dependency" tabindex="-1"><a class="header-anchor" href="#step-1-introduce-distributed-lock-dependency"><span>Step 1. Introduce distributed lock dependency</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&lt;!-- 引入分布式锁依赖 --&gt;</span>
<span class="line">&lt;dependency&gt;</span>
<span class="line">    &lt;groupId&gt;org.jeecgframework.boot&lt;/groupId&gt;</span>
<span class="line">    &lt;artifactId&gt;jeecg-boot-starter-lock&lt;/artifactId&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h3 id="step-2-distributed-lock-redisson-configuration" tabindex="-1"><a class="header-anchor" href="#step-2-distributed-lock-redisson-configuration"><span>Step 2. Distributed lock redisson configuration</span></a></h3><p>Distributed lock configuration in nacos in jeecg-dev.yaml<br><img src="https://lfs.k.topthink.com/lfs/81c9c914bcc4ab33bddc29fcc36665c76f34f55ac2c82311476c66e039352243.dat" alt=""></p><ul><li>address: connection address and port</li><li>password​</li><li>Type deployment method</li><li>enabled: Whether to enable distributed lock</li></ul><h3 id="step-3-customize-annotations" tabindex="-1"><a class="header-anchor" href="#step-3-customize-annotations"><span>Step 3. Customize annotations</span></a></h3><h4 id="distributed-lock-annotation-jlock" tabindex="-1"><a class="header-anchor" href="#distributed-lock-annotation-jlock"><span>Distributed lock annotation<code>@JLock</code></span></a></h4><p>Example:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line"> //lockKey支持spel表达式</span>
<span class="line"> @JLock(lockKey= &quot;redis-lock&quot;)</span>
<span class="line"> @JLock(lockKey=&quot;#user.name&quot;)</span>
<span class="line"> @JLock(lockKey ={&quot;#user.name&quot;,&quot;#user.id&quot;})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><p>Parameter Description:</p><ul><li><a href="https://gitee.com/jeecg//jeecg-boot-starter/blob/master/jeecg-boot-starter-lock/src/main/java/org/jeecg/boot/starter/lock/annotation/JLock.java" target="_blank" rel="noopener noreferrer">JLock parameter definition</a></li></ul><h4 id="annotation-to-prevent-duplicate-submission-jrepeat" tabindex="-1"><a class="header-anchor" href="#annotation-to-prevent-duplicate-submission-jrepeat"><span>Annotation to prevent duplicate submission<code>@JRepeat</code></span></a></h4><p>Example:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@JRepeat(lockKey = &quot;#name&quot;, lockTime = 5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>copy</p><p>Parameter Description:</p><ul><li><a href="https://gitee.com/jeecg/jeecg-boot-starter/blob/master/jeecg-boot-starter-lock/src/main/java/org/jeecg/boot/starter/lock/annotation/JRepeat.java" target="_blank" rel="noopener noreferrer">JRepeat parameter definition</a></li></ul><h3 id="step-4-write-a-distributed-lock-sample-code" tabindex="-1"><a class="header-anchor" href="#step-4-write-a-distributed-lock-sample-code"><span>Step 4. Write a distributed lock sample code</span></a></h3><p><code>@JLock</code> <code>@JRepeat</code>Implemented through jeecg&#39;s custom annotations</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">/**</span>
<span class="line"> * 分布式锁测试demo</span>
<span class="line"> */</span>
<span class="line">@Slf4j</span>
<span class="line">@Component</span>
<span class="line">public class DemoLockTest {</span>
<span class="line">    @Autowired</span>
<span class="line">    RedissonLockClient redissonLock;</span>
<span class="line"></span>
<span class="line">    /**</span>
<span class="line">     *注解方式测试分布式锁</span>
<span class="line">     */</span>
<span class="line">    @Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span>
<span class="line">    @JLock(lockKey= &quot;redis-lock&quot;)</span>
<span class="line">    public void execute() throws InterruptedException {</span>
<span class="line">        log.info(&quot;执行execute任务开始，休眠三秒&quot;);</span>
<span class="line">        Thread.sleep(3000);</span>
<span class="line">        System.out.println(&quot;=======================业务逻辑1=============================&quot;);</span>
<span class="line">        log.info(&quot;execute任务结束，休眠三秒&quot;);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    /**</span>
<span class="line">     * 编码方式测试分布式锁</span>
<span class="line">     */</span>
<span class="line">    @Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span>
<span class="line">    public void execute2() throws InterruptedException {</span>
<span class="line">        if (redissonLock.tryLock(&quot;redisson&quot;, -1, 10000)) {</span>
<span class="line">            log.info(&quot;执行任务execute2开始，休眠三秒&quot;);</span>
<span class="line">            Thread.sleep(3000);</span>
<span class="line">            System.out.println(&quot;=======================业务逻辑2=============================&quot;);</span>
<span class="line">            log.info(&quot;定时execute2结束，休眠三秒&quot;);</span>
<span class="line">            redissonLock.unlock(&quot;redisson&quot;);</span>
<span class="line">        } else {</span>
<span class="line">            log.info(&quot;execute2获取锁失败&quot;);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h3 id="cluster-configuration" tabindex="-1"><a class="header-anchor" href="#cluster-configuration"><span>Cluster Configuration</span></a></h3><p>Supports 4 redis deployment modes: stand-alone, sentinel, cluster, master-slave</p><h4 id="_1-single-machine-configuration-example" tabindex="-1"><a class="header-anchor" href="#_1-single-machine-configuration-example"><span>1 Single machine configuration example</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">redisson.address=127.0.0.1:6379</span>
<span class="line">redisson.type=STANDALONE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h4 id="_2-sentinel-configuration-example" tabindex="-1"><a class="header-anchor" href="#_2-sentinel-configuration-example"><span>2 Sentinel Configuration Example</span></a></h4><p><strong>The format of redisson.lock.server.address</strong> is: sentinel alias in sentinel.conf configuration, service IP and port of sentinel1 node, service IP and port of sentinel2 node, service IP and port of sentinel3 node.<br> For example, in sentinel.conf, it is configured as sentinel monitor my-sentinel-name 127.0.0.1 6379 2, so here is my-sentinel-name</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">redisson.address=my-sentinel-name,127.0.0.1:26379,127.0.0.1:26389,127.0.0.1:26399</span>
<span class="line">redisson.type=SENTINEL</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h4 id="_3-cluster-configuration-example" tabindex="-1"><a class="header-anchor" href="#_3-cluster-configuration-example"><span>3 Cluster Configuration Example</span></a></h4><p>The cluster mode has at least 6 nodes (3 masters and 3 slaves, 3 masters for sharding, and 3 slaves to ensure high availability after the master fails).<br> The address format is: 127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">redisson.address=127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384</span>
<span class="line">redisson.type=CLUSTER</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p><h4 id="_4-master-slave-configuration-example" tabindex="-1"><a class="header-anchor" href="#_4-master-slave-configuration-example"><span>4 Master-Slave Configuration Example</span></a></h4><p>For example: 127.0.0.1:6379, 127.0.0.1:6380, 127.0.0.1:6381<br> represents the master node: 127.0.0.1:6379, the slave node 127.0.0.1:6380, and the slave node 127.0.0.1:6381</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">redisson.address=127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381</span>
<span class="line">redisson.type=MASTERSLAVE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>copy</p>`,42)]))}const d=n(l,[["render",t]]),c=JSON.parse('{"path":"/syncboot/common-annotations/redisson-distributed-lock-configuration.html","title":"Redisson distributed lock configuration","lang":"ko-KR","frontmatter":{"order":11},"git":{"updatedTime":1749179241000,"contributors":[{"name":"poh","username":"poh","email":"poh@empasy.com","commits":1,"url":"https://github.com/poh"}],"changelog":[{"hash":"a96cbbf1f6c96d0e9d6bafa4174131f10429b849","time":1749179241000,"email":"poh@empasy.com","author":"poh","message":"sync 제품군 추가"}]},"filePathRelative":"syncboot/common-annotations/redisson-distributed-lock-configuration.md"}');export{d as comp,c as data};
